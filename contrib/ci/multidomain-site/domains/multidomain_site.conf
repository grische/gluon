-- This is an example domain configuration for Gluon v2022.1
--
-- Take a look at the documentation located at
-- https://gluon.readthedocs.io/ for details.
--
-- This configuration will not work as is. You're required to make
-- community specific changes to it!
{
  -- multiple codes/names can be defined, the first one is the primary name
  -- additional aliases can be defined
  domain_names = {
    multidomain_site = 'Multidomain-Site Domain',
  },

  -- 32 bytes of random data, encoded in hexadecimal
  -- This data must be unique among all sites and domains!
  -- Can be generated using: echo $(hexdump -v -n 32 -e '1/1 "%02x"' </dev/urandom)
  domain_seed = '9471050959fe98c0a981b9df72077b25e060965184adfc3739f3ae6ec49c279e',

  -- unique network prefixes per domain
  -- prefix6 is required, prefix4 can be omitted if next_node.ip4
  -- is not set.
  prefix4 = '10.0.0.0/20',
  prefix6 = 'fd::/64',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- ESSIDs used for client network.
    ap = {
      ssid = "gluon-multidomain-site-ci-ssid",
      -- disabled = true, -- (optional)

      -- Configuration for a backward compatible OWE network below.
      owe_ssid = 'owe.gluon-minimal-site-ci-ssid', -- (optional - SSID for OWE client network)
      owe_transition_mode = true, -- (optional - enables transition-mode - requires ssid as well as owe_ssid)
    },

    mesh = {
      -- Adjust these values!
      id = 'ueH3uXjdp', -- usually you don't want users to connect to this mesh-SSID, so use a cryptic id that no one will accidentally mistake for the client WiFi
      -- disabled = true, -- (optional)
    },
  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    ap = {
      ssid = "gluon-multidomain-site-ci-ssid",
    },
    mesh = {
      -- Adjust these values!
      id = 'ueH3uXjdp',
    },
  },


  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  -- next_node = {
    -- anycast IPs of all nodes
    -- name = { 'nextnode.location.community.example.org', 'nextnode', 'nn' },
    -- ip4 = '10.xxx.0.xxx',
    -- ip6 = 'fdxx:xxxx:xxxx::xxxx',
  -- },

  mesh_vpn = {
    fastd = {
      groups = {
        backbone = {
          peers = {
          },
        },
      },
    },
  },
}
